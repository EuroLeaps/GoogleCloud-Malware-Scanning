#!/usr/bin/env python

# Copyright 2023 EuroLeaps
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import base64
import functions_framework
from google.cloud import secretmanager
import google.cloud.logging
from google.cloud import storage

from virus_total_apis import PublicApi as VirusTotalPublicApi

import os
import hashlib
import datetime
import json

from dotenv import load_dotenv
load_dotenv()

# Setup logging
client = google.cloud.logging.Client()
logger = client.logger("GCP_Malware_Scanner")

# Get VT API key
try:
    VT_API_KEY = os.environ["VT_API_KEY"]
except KeyError:
    logger.log_text("VT_API_KEY not found in env file. Scanner exiting.", severity="ERROR")
    exit()

vt = VirusTotalPublicApi(VT_API_KEY)
storage_client = storage.Client()

# EICAR = "X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*".encode('utf-8')
# EICAR_MD5 = hashlib.md5(EICAR).hexdigest()

# response = vt.get_file_report(EICAR_MD5)
# print(json.dumps(response, sort_keys=False, indent=4))

def list_and_scan_buckets():
    """Lists and scans all buckets."""
    buckets = storage_client.list_buckets()
    for bucket in buckets:
        print(f"Scanning bucket: {bucket.name}")
        list_and_scan_objects(bucket)

def list_and_scan_objects(bucket):
    """Lists and scans all objects in a given bucket."""
    blobs = storage_client.list_blobs(bucket)
    for blob in blobs:
        print(f"Scanning blob: {blob.name}")
        contents = blob.download_as_string()
        
        if(blob.size > 0):
            md5_hash = hashlib.md5(contents).hexdigest()
            # print(f'MD5: {md5_hash}')
            response = vt.get_file_report(md5_hash)
            response_code = response['results']['response_code']
            # print(f'VT Response Code: {response_code}')
            if(response_code == 1):
                print(response['results']['permalink'])
                # print(response['results']['scans'])


@functions_framework.cloud_event
def entry_point_function(scanner_trigger):
    try:
        message = base64.b64decode(scanner_trigger.data["message"]["data"]).decode()
        logger.log_text(f"Scanner triggered: {scanner_trigger} {message}")
    except Exception as e:
        logger.log_text(f'Error in Scanner: Type {type(e)} Args {e.args} Object {e}', severity="ERROR")

if __name__ == "__main__":
    list_and_scan_buckets()